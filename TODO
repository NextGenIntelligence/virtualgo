DONE:

    Implemented function to get nearest point on line and biconvex

    This will be used for the left edge

    Implemented the top and left side cases for the biconvex nearest
    point to the board, seem to be working OK.

    The plan for left side is as follows:

        1. Test the primary plane, but ignore if point is outside bounds
        2. Test the side plane, but ignore if point is outside bounds
        3. Test the edge, by definition cannot be outside bounds

    So far the first two cases are implemented and seem to be working

    Next I am hooking up the left side edge case

    Once this is done it should be relatively easy to generalize
    to all edges, eg. break up into a function so there is not
    a lot of cut & paste.

    Integrate nearest point on left edge case

    Visualized nearest point between stone and board. Seems to be working

    Why is the collision response suspect when hitting the side edge?

    Could it be that the normal is slightly incorrect?

    Should the normal be on the biconvex surface instead of the edge
    normal, is this what is wrong?!

    Found it: the nearest point on biconvex vs. line function was wrong

    Reworking the function so that it considers the sphere and the
    circle edge cases properly, and takes the closest point to the 
    line.

TODO:
    
    -----------------------------------------------------------------------

    Argh... the wireframe is fucked up with z testing again... !

    -----------------------------------------------------------------------

    Implement corner cases for collision with board

    -----------------------------------------------------------------------

    Implement rolling and sliding friction

    -----------------------------------------------------------------------

    Implement mode with stone and board rendered in solid color

    Load texture for stone

    Render stone with murasaki texture

    Render board with wood texture

    Develop textures for grid lines and star points

    -----------------------------------------------------------------------

    Implement stone vs. stone collision

    -----------------------------------------------------------------------