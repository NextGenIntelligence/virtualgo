DONE:

    ...

TODO:

    Need to add air resistance and rolling friction



    ----------------------------------------------

    Render the go board with width/height/depth. 

    Render the infinite floor with grid as well

    First collide with the board, then collide with the floor plane second (both push-out)

    Implement test case for side collisions

    Implement test case for corner collisions

    Implement corner and side case for collision

    ----------------------------------------------

    Implement linear kinematics demo

    Implement angular kinematics demo

    Side-by-side demo of linear bouncing with difference elasticities from 0 to 1

    Side-by-side demo of angular collision response with elasticities 0 -> 1

    Same for friction?!

    ----------------------------------------------



    ----------------------------------------------

    Create proper OpenGL vertex buffer / index buffer object 
    using code from cube demo. Should be much faster to render stone

    Write a vertex shader to generate uvs as a function of xy

    Render a stone with a white texture

    Render the stone with specular highlight

    ----------------------------------------------

    Render the board with a wood texture

    Render the lines and the circles at the star points (9x9)

    ----------------------------------------------

    Enable anisotropic filtering

    Add a toggle mode to rotate between different camera views

    Render a blurred out reflection of the stones on the board

    ============================================================






    --------------------------------------------------------------------

    Need to add a concept of rolling friction. Otherwise the stone
    never comes to rest if it is spinning around the Y axis on the board.

    (the point is not moving, therefore no friction force is applied)

    --------------------------------------------------------------------






    ============================================================

    *** IMPLEMENT STONE VS. BOARD EDGE AND CORNER CASES! ***

    Implement biconvex vs. line intersection

    IMPORTANT: not ray intersection, but point/normal
    of intersection of biconvex against an edge!

    Assume that the line is infinite

    Based around nearest point on the line to the sphere,
    then it is just comparing the projected point to see
    if it is on the biconvex surface.

    ============================================================

    Implement left edge case SAT:

        1. may collide with primary plane
        2. may collide with left plane
        3. may collide with edge between primary and left plane

    Primary surface case is already implemented

    Left surface case is already implemented (plane again)

    Take the three cases and determine the area with the least
    collision. If any case is not intersecting, then no collision.

    Unit test edge cases:

        not colliding (vertically above)                            -
        not colliding (rotated such that not touching side plane)   |
        not colliding (rotated such that not touching side edge)    /

        colliding (rotated such that touching primary surface)      |
        colliding (rotated such that touching side surface)         -
        colliding (rotated such that touching edge)                 \

    Generalize fn so that it takes two planes as input, and finds
    the edge from these planes, and uses that to implement SAT.

    Therefore we should be comfortable that this case generalizes
    to the other edges without hard coding all these cases!

    Extend the to all edges.

    Unit test all edge cases.

    ============================================================

    Implement one corner case via SAT (top-left)

    Unit test corner case.

    Extend to all corners.

    ============================================================




 
    ============================================================

    Visualize stone vs. stone SAT

    Two stones rotating next to each other.

    Visualize their x/y axis supports for each stone.

    Add some vis when they are colliding.

    Consider whether or not we need additional separating
    axes than the current, it should be clear from the vis.

    ============================================================

    Implement nearest point on biconvex vs. biconvex

    This is required to determine the collision point and normal
    between two stones after bisecting to find intersection t.

    Visualize nearest points between biconvex if not intersecting
    in yellow.

    Add some key to move the biconvex further away from each other
    or closer together (left/right)

    ============================================================

    Generalize stones to an array of rigid bodies, array of
    biconvex shapes (don't assume all the same size...)

    Determine algorithm for detecting collisions globally

    Study speculative contacts approach and think through

    What about "ghost" contacts?!

    End result, should have a bunch of stones falling while you
    are holding space bar down. These stones should tumble and
    collide and come to rest on the board.
