DONE:

    Render the stone with gouraud shading

    Enable anti-aliasing

    Integrate GNU Tesselation Library
    http://gts.sourceforge.net/index.html

    Recover code from original Virtual Go that performed
    the tesselation of the go stone via GTS.

    Code is crap. Discarded.

    Subdivide the spherical cap by starting with a n-gon shape
    projected on to the sphere, and subdividing the triangles
    in the hexagon shape and projecting out to the sphere.

    5-gon seems to give best result (triangles close to equilateral)

    Generate the bottom of the biconvex

TODO:

    Convert the generate biconvex to write out a vertex buffer

    Optimize by determining number of triangles and point to
    vertices, when adding a vertex, search for some vertex
    within a hash of its coordinates rounded to some 3d grid

    If the vertex already exists within some threshold,
    weld the vertex and do not emit a new vertex -- triangle
    refers to old vertex index

    Design data structure to walk this algorithm while
    emitting triangle (index buffer), and vertex buffer
    (with enough hash/memory to find weldable verts easily)

    ----------------------------------------------

    Next, determine how to mathematically define the ideal
    torus for the smooth edge on the biconvex solid.

    The input should be the height of the bevel,
    this can then be used to determine the tangent
    at the edge of the sphere

    Knowing the tangent at the edge it should be 
    possible to determine both the sphere radius
    and the offset of the center of the torus 
    generating sphere from the edge of the biconvex
    
    (need to define this better)

    But basically, you have the option of an
    infinite number of torus radius, but given
    that it must match the given bevel height
    and the tangents at the end should narrow
    it down to only one potential torus.

    ----------------------------------------------

    Render a stone with a white texture

    Render the stone with specular highlight

    ----------------------------------------------

    Render the board with a wood texture

    Render the lines and the circles at the star points (9x9)

    ----------------------------------------------

    Advanced Rendering

    Enable anisotropic filtering

    Study the OpenGL shader guide to work out how to do basic shaders

    Add a toggle mode to rotate between different camera views

    Render a blurred out reflection of the stones on the board

    ============================================================






    --------------------------------------------------------------------

    Need to add a concept of rolling friction. Otherwise the stone
    never comes to rest if it is spinning around the Y axis on the board.

    (the point is not moving, therefore no friction force is applied)

    --------------------------------------------------------------------

    Determine why the stone jitters at one step.

    What is going on? Where does the jitter come from?

    Why is it reduced with multiple substeps?

    Can I reduce the jitter without multiple substeps?

    --------------------------------------------------------------------



    ============================================================

    *** IMPLEMENT STONE VS. BOARD EDGE AND CORNER CASES! ***

    Implement biconvex vs. line intersection

    IMPORTANT: not ray intersection, but point/normal
    of intersection of biconvex against an edge!

    Assume that the line is infinite

    Based around nearest point on the line to the sphere,
    then it is just comparing the projected point to see
    if it is on the biconvex surface.

    ============================================================

    Implement left edge case SAT:

        1. may collide with primary plane
        2. may collide with left plane
        3. may collide with edge between primary and left plane

    Primary surface case is already implemented

    Left surface case is already implemented (plane again)

    Take the three cases and determine the area with the least
    collision. If any case is not intersecting, then no collision.

    Unit test edge cases:

        not colliding (vertically above)                            -
        not colliding (rotated such that not touching side plane)   |
        not colliding (rotated such that not touching side edge)    /

        colliding (rotated such that touching primary surface)      |
        colliding (rotated such that touching side surface)         -
        colliding (rotated such that touching edge)                 \

    Generalize fn so that it takes two planes as input, and finds
    the edge from these planes, and uses that to implement SAT.

    Therefore we should be comfortable that this case generalizes
    to the other edges without hard coding all these cases!

    Extend the to all edges.

    Unit test all edge cases.

    ============================================================

    Implement one corner case via SAT (top-left)

    Unit test corner case.

    Extend to all corners.

    ============================================================




 
    ============================================================

    Visualize stone vs. stone SAT

    Two stones rotating next to each other.

    Visualize their x/y axis supports for each stone.

    Add some vis when they are colliding.

    Consider whether or not we need additional separating
    axes than the current, it should be clear from the vis.

    ============================================================

    Implement nearest point on biconvex vs. biconvex

    This is required to determine the collision point and normal
    between two stones after bisecting to find intersection t.

    Visualize nearest points between biconvex if not intersecting
    in yellow.

    Add some key to move the biconvex further away from each other
    or closer together (left/right)

    ============================================================

    Generalize stones to an array of rigid bodies, array of
    biconvex shapes (don't assume all the same size...)

    Determine algorithm for detecting collisions globally

    Study speculative contacts approach and think through

    What about "ghost" contacts?!

    End result, should have a bunch of stones falling while you
    are holding space bar down. These stones should tumble and
    collide and come to rest on the board.
