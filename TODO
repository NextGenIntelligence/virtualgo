DONE:

TODO:

    The fix for stone lifting/selection has broken
    the stone flicking on release.

    To fix I think it is necessary to track the
    previous stone position and update only when
    "TouchesMoved", eg. don't use the intersection
    point which adjusts also when the stone moves
    up in the "UpdateTouches" fn.

    This should allow both flicking and nice robust
    stone movement upwards.

    -------------------------------------------------

    Basically, if a stone is being moved and the drop
    point is actually on the board, basically the 
    safest thing to do is simply to search the
    ENTIRE GODDAMN BOARD to find a nice place 
    to put the stone.

    Alternatively, remember where the stone was
    dragged from, and revert it to where it came
    from.

    It's NOT OK for a stone to just disappear!!!

    -------------------------------------------------

    When a stone is colliding with the constraint
    sometimes it gets stuck in a bad orientation
    because of friction with the board.

    Perhaps stones while hard colliding against
    the constraint planes, friction should be 
    disabled, or reduced with the board, as to
    make the stone return to a good orientation
    quickly.

    --------------------------------------------------

    Sometimes stones simply don't collide.

    What is causing this? 

    It appears to be scene grid related.

    Can I catch this in the debugger?

    Can I reproduce this in the unit tests?

    --------------------------------------------------









    POLISH PHASE

    --------------------------------------------------

    Some highlighting of the currently selected stone,
    eg. with pulsing of light intensity would also be
    cool.

    ----------------------------------------------------

    When a stone is removed it should be *at minimum*
    an alpha fade-out of both stone and shadow.

    Right now it just pops out of existence.

    This looks terrible.

    --------------------------------------------------

    Generally speaking there needs to be a separation
    from physical and visual position.

    While a stone is selected and dragging, the visual
    position should be interpolated/extrapolated from
    the touch positions (which don't always come in
    every frame!)

    --------------------------------------------------

    Multitouch should not be able to drag two stones
    together. 

    When selecting multiple stones, all stones should
    standardize to the same select height / plane,
    otherwise it gets confusing.

    After this, all stones should collide with the
    other selected stones and push each other out,
    but only along the xy plane, not vertically.

    This way we can avoid having multi-touch forcing
    stone penetration.

    --------------------------------------------------

    Would be really nice to hold down off the board and
    have the stones "tighten" towards their constraints.

    Currently this can be approximated by randomly
    shaking the board. This is a bit weird! :)

    -------------------------------------------------

    It is sometimes jarring to see the stone hit an
    invisible wall, it would be nicer if this constraint
    had some softness to it, such that a soft guidance
    would keep the stone within the constraint most
    of the time

    -------------------------------------------------

    Black stones should be slightly larger than white
    stones, both in physics calculation and in mesh.

    Would be nice to turn this on.

    -------------------------------------------------------------








    COLLISION DETECTION & RESPONSE CONTINUED

    -------------------------------------------------

    Get a basic linear collision response going
    between the stones so flicking a stone at another
    stone results in basically plausible collision.

    -----------------------------------------------------------------

    Determine sets of axes required to test biconvex vs. biconvex

    Find axis of least penetration

    Implement proper collision response for two moving objects
    with angular effects. 

    -----------------------------------------------------------------

    I have disable collision between selected stone
    and non-selected stones.

    In reality, I want this back on eventually, as
    the user can launch stones while stones are selected
    which causes penetration.

    Penetration is not acceptable.

    -------------------------------------------------------------

    Now that collision detection is done using a tighter shape,
    dragging stones over other stones should look a lot smoother
    because the ramp up is less severe, eg. less energy being used
    to lift stones above other stones.

    -------------------------------------------------








    -------------------------------------------------------
    
    Would be really nice if I could dynamically adjust
    stone sizes and it would adapt the friction and
    damping settings. Perhaps linear interpolation?

    Would be really nice to let the player adjust stone
    size while the app is running. Would be a very cool
    demo of the different way stones move.

    eg. Do sizes 30, 32, 34, 36, 38, 40...

    Also would be nice to pass over all things that
    affect the stone and make them mass aware, eg.
    impulses should affect heavy stones less

    Perhaps I need to calculate the mass of the go
    stones at various sizes, and feed this in to the
    simulation. It seems the mass needs to be larger
    so that impulses would have less effect.

    ----------------------------------------------------------





    -----------------------------------------------------------------

    Research solver. What do I have to do to implement the solver?

    I strongly suspect that I have to unify the treatement of static
    and non-static contacts in order for the solver to work, because
    the solver must balance the needs of the stones penetrating vs.
    the penetration with the ground and board.

    There must be a way to run the solver without running CD steps
    between each iteration. I simply cannot afford this. But how does
    this work with position correction against penetration?

    (The position offset, is that something that accumulates?)

    Need to talk to Erin to understand the core algorithm.

    Do I need to run CD in between each iteration?

    -----------------------------------------------------------------




    -----------------------------------------------------------------

    Board grid corners need special treatment, a corner texture to
    fix up the gap (otherwise it does not get AA properly...!)

    -----------------------------------------------------------------

    Soften the edges of the go board by baking in some rounding,
    irregularity etc. They look super harsh and sharp right now!

    -----------------------------------------------------------------






    -----------------------------------------------------------------

    Capture go stone diffuse textures

    Implement some way to swipe select between go stone textures

    Perhaps double swipe up/down -- I'd like to let the user
    mix and match go stones with different go boards.

    -----------------------------------------------------------------





    -----------------------------------------------------------------

    Capture go stone sounds

    Buy a microphone

    Research how to capture foley

    Need sound of stone hitting board with different variations

    Stone hitting metal for the sides of the frustum

    Stone hitting glass for the front screen

    -----------------------------------------------------------------

    Implement double swipe detection

    Double swipe left/right select between different go board 
    textures, eg. light, dark, red wood etc.

    -----------------------------------------------------------------
